#!/usr/bin/env python
#ref /usr/share/pyshared/keystoneclient/shell.py
from keystoneclient import utils
from keystoneclient.shell import OpenStackIdentityShell


class Keystoneadmin(OpenStackIdentityShell):
    #ref /usr/share/pyshared/keystoneclient/v2_0/shell.py
    @utils.arg('tenant', metavar='<tenant-id>', nargs='?', default=None,
           help='Tenant ID (Optional);  lists all users if not specified')
    def do_showall(self,kc, args):
        """Show all keystone data"""
        tenants = kc.tenants.list()
        users = kc.users.list(tenant_id=args.tenant)
	self.print_relation(kc,args,tenants,users)

    def print_relation(self,kc,args,tenants,users):
        rows=list()
        class Row:
                def __init__(self,uname="",uid="",tname="",tid="",rname="",rid=""):
                        self.uid=uid
                        self.uname=uname
                        self.tid=tid
                        self.tname=tname
                        self.rid=rid
                        self.rname=rname
        for t in tenants:
                for u in users:
                        roles = kc.roles.roles_for_user(user=u.id, tenant=t.id)
                        for r in roles:
                                row=Row(uname=u.name,uid=u.id,tname=t.name,tid=t.id,rname=r.name,rid=r.id)
                                rows.append(row)
        utils.print_list(rows, ['rname','tname','uname','rid','tid','uid'])

    @utils.arg('--name', metavar='<role-name>', required=True,
           help='role name')
    def do_role_id(self,kc, args):
       """get role id"""
       f=next((i for i in kc.roles.list() if i.name==args.name) ,None)
       if f is not None:
	       print "%s\t%s"%(f.id,f.name)

    @utils.arg('--name', metavar='<tenant-name>', required=True,
           help='tenant name')
    def do_tenant_id(self,kc, args):
       """get role id"""
       f=next((i for i in kc.tenants.list() if i.name==args.name) ,None)
       if f is not None:
	       print "%s\t%s"%(f.id,f.name)
    @utils.arg('--name', metavar='<tenant-name>', required=True,
           help='tenant name')
    def do_user_id(self,kc, args):
       """get user id"""
       f=next((i for i in kc.users.list() if i.name==args.name) ,None)
       if f is not None:
	       print "%s\t%s"%(f.id,f.name)



import sys
def main():
        k=Keystoneadmin()
        k.main(sys.argv[1:])

if __name__ == "__main__":
    main()

