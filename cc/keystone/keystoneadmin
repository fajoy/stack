#!/usr/bin/env python
#ref /usr/share/pyshared/keystoneclient/shell.py
from keystoneclient import utils
from keystoneclient.shell import OpenStackIdentityShell

class MyConsole:
    """aaaa"""
    def    __init__(self,kc=None,args=None):
        self.kc=kc
        self.args=args
	self.mode="main"
	self.funcs=self.get_func("do_"+self.mode)
	self.show_func=getattr(self,"show_"+self.mode)
    def get_func(self,prefix):
	funcs=list()
	for fn in dir(self):
	     if fn.startswith(prefix):
		func=getattr(self,fn)
		docs=func.__doc__.split("\n",2)
		funcs.append((docs[0],func))
	return	dict(funcs)

    def show_opts(self):
	for (key,f) in self.funcs.items():
		docs=f.__doc__.split("\n",2)
		cmd=docs[0]
		text=docs[1]
		print "[%s]%s"%(str(key),text)

    def show_main(self):
	print "main function"
	self.show_opts()
	
    def input_func(self):
	self.show_func()
	sys.stdout.write("input:")
	line=sys.stdin.readline()[:-1]
	if len(line)==0:
		return
	opts=line.split(" ",2)[0]
	funcs=self.funcs
	if funcs.has_key(opts):
		funcs[opts](line)
	else:
		print "[%s] no option"%(opts)


    def main(self):
	while 1:
	  self.input_func()

    def do_main_test(self,line):
	"""a
	test: testaaa"""
	print "test"


class Keystoneadmin(OpenStackIdentityShell):
    #ref /usr/share/pyshared/keystoneclient/v2_0/shell.py
    @utils.arg('tenant', metavar='<tenant-id>', nargs='?', default=None,
           help='Tenant ID (Optional);  lists all users if not specified')
    def do_showall(self,kc, args):
        """Show all keystone data"""
        tenants = kc.tenants.list()
        users = kc.users.list(tenant_id=args.tenant)
	self.print_relation(kc,args,tenants,users)

    def print_relation(self,kc,args,tenants,users):
        rows=list()
        class Row:
                def __init__(self,uname="",uid="",tname="",tid="",rname="",rid=""):
                        self.uid=uid
                        self.uname=uname
                        self.tid=tid
                        self.tname=tname
                        self.rid=rid
                        self.rname=rname
        for t in tenants:
                for u in users:
                        roles = kc.roles.roles_for_user(user=u.id, tenant=t.id)
                        for r in roles:
                                row=Row(uname=u.name,uid=u.id,tname=t.name,tid=t.id,rname=r.name,rid=r.id)
                                rows.append(row)
        utils.print_list(rows, ['rname','tname','uname','rid','tid','uid'])


    def do_console(self,kc,args):
	"""My Console Mode"""
	c=MyConsole(kc=kc,args=args)
	c.main()


import sys
def main():
        k=Keystoneadmin()
        k.main(sys.argv[1:])

if __name__ == "__main__":
    main()

